// Generated by CoffeeScript 1.12.2

/*
Validid is open source in:
https://github.com/Edditoria/validid

under MIT license:
https://github.com/Edditoria/validid/blob/master/LICENSE.md
 */

(function() {
  var Validid, validid;

  Validid = (function() {
    function Validid() {}

    Validid.prototype.tools = {
      normalize: function(id) {
        var re;
        id = id.toUpperCase();
        re = /\([A-Z0-9]\)$/;
        if (re.test(id)) {
          id = id.replace(/\(|\)/g, '');
        }
        return id;
      }
    };

    Validid.prototype.cnid = function(id) {
      var isChecksumValid;
      isChecksumValid = function(id) {
        var char, checkDigit, getWeight, i, identifier, index, len, remainder, weightedSum;
        identifier = id.slice(0, -1);
        checkDigit = id.slice(-1) === 'X' ? 10 : +id.slice(-1);
        getWeight = function(n) {
          return Math.pow(2, n - 1) % 11;
        };
        weightedSum = 0;
        index = id.length;
        for (i = 0, len = identifier.length; i < len; i++) {
          char = identifier[i];
          weightedSum += +char * getWeight(index);
          index--;
        }
        remainder = (12 - weightedSum % 11) % 11 - checkDigit;
        return remainder === 0;
      };
      return isChecksumValid(id);
    };

    Validid.prototype.hkid = function(id) {
      var getLetterValue, isAllCharValid, isChecksumValid, isFormatValid, isLengthValid, isLetter;
      getLetterValue = function(letter) {
        return letter.charCodeAt(0) - 64;
      };
      isLetter = function(char) {
        return /[a-zA-Z]/.test(char);
      };
      isLengthValid = function(id) {
        return id.length === 8 || id.length === 9;
      };
      isAllCharValid = function(id) {
        return !/[^A-Z0-9]/.test(id);
      };
      isFormatValid = function(id) {
        return /^[A-Z]{1,2}[0-9]{6}[0-9A]$/.test(id);
      };
      isChecksumValid = function(id) {
        var char, charValue, checkDigit, i, identifier, len, remainder, weight, weightedSum;
        weight = id.length;
        weightedSum = 0;
        identifier = id.slice(0, -1);
        checkDigit = id.slice(-1) === 'A' ? 10 : +id.slice(-1);
        for (i = 0, len = identifier.length; i < len; i++) {
          char = identifier[i];
          charValue = isLetter(char) ? getLetterValue(char) : +char;
          weightedSum += charValue * weight;
          weight--;
        }
        remainder = (weightedSum + checkDigit) % 11;
        return remainder === 0;
      };
      id = this.tools.normalize(id);
      return isLengthValid(id) && isAllCharValid(id) && isFormatValid(id) && isChecksumValid(id);
    };

    Validid.prototype.twid = function(id) {
      var isChecksumValid, isFormatValid, isLengthValid;
      isLengthValid = function(id) {
        return id.length === 10;
      };
      isFormatValid = function(id) {
        return /^[A-Z][0-9]{9}$/.test(id);
      };
      isChecksumValid = function(id) {
        var char, i, idLen, idTail, len, letterIndex, letterValue, letters, remainder, weight, weightedSum;
        idLen = id.length;
        letters = 'ABCDEFGHJKLMNPQRSTUVXYWZIO';
        letterIndex = letters.indexOf(id[0]) + 10;
        letterValue = Math.floor(letterIndex / 10) + (letterIndex % 10) * (idLen - 1);
        idTail = id.slice(1);
        weight = idLen - 2;
        weightedSum = 0;
        for (i = 0, len = idTail.length; i < len; i++) {
          char = idTail[i];
          weightedSum += +char * weight;
          weight--;
        }
        remainder = (letterValue + weightedSum + +id.slice(-1)) % 10;
        return remainder === 0;
      };
      id = this.tools.normalize(id);
      return isLengthValid(id) && isFormatValid(id) && isChecksumValid(id);
    };

    return Validid;

  })();

  validid = new Validid();

  if ((typeof module !== "undefined" && module !== null) && module.exports) {
    module.exports = validid;
  }

  if (typeof window !== "undefined" && window !== null) {
    window.validid = validid;
  }

}).call(this);
